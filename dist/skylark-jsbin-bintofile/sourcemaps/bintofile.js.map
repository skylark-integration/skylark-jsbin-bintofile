{"version":3,"sources":["bintofile.js"],"names":["define","skylark","doctypeRe","RegExp","insert","source","needle","value","toLowerCase","indexOf","left","substring","lastIndexOf","right","result","safeForHTML","s","replace","attach","bin","options","console","error","Error","stack","proto","undefined","slice","file","html","css","javascript","processors","meta","url","revision","split","join","head","title","doctype","trim","shift","match","body","sourceScripts","map","type","content","bodytag","signature","string","hash","i","length","charCodeAt","toString"],"mappings":"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","file":"../bintofile.js","sourcesContent":["define([\n  \"skylark-langx/skylark\",\n ],function(skylark){\n  'use strict';\n\n  var doctypeRe = new RegExp(/^<!doctype[^>]*>\\n?/im);\n\n  function hash(string) {\n    var hash = 0;\n    var i = 0;\n    var c = 0;\n\n    if (string.length === 0) {\n      return hash;\n    }\n\n    for (; i < string.length; i++) {\n      var c = string.charCodeAt(i);\n      hash = ((hash<<5)-hash)+c;\n      hash = hash & hash; // Convert to 32bit integer\n    }\n\n    return hash.toString(16);\n  }\n\n  function insert(source, needle, value) {\n    if (source.toLowerCase().indexOf(needle.toLowerCase()) === -1) {\n      return null;\n    }\n\n    var left = source.substring(0, source.toLowerCase().lastIndexOf(needle.toLowerCase()));\n    var right = source.substring(source.toLowerCase().lastIndexOf(needle.toLowerCase()));\n    var result = '';\n\n    if (left && right) {\n      result = left + value + right;\n    }\n    return result;\n  }\n\n  function safeForHTML(s) {\n    return s.replace(/<\\/script>/gi, '<\\\\/script>').replace(/<!--/g, '<\\\\!--');\n  }\n\n  function binToFile(bin, options) {\n    if (!bin) {\n      console.error('binToFile requires bin object', (new Error()).stack);\n      return '<!DOCTYPE html>';\n    }\n\n    if (!options) {\n      options = {};\n    }\n\n    // allows for the proto to be '' (not sure why you'd want that though...)\n    var proto = options.proto !== undefined ? options.proto : 'http:';\n\n    // protect myself from idoits, like me.\n    if (proto && proto.slice(-1) !== ':') {\n      proto += ':';\n    }\n\n    var file = '';\n    var html = (bin.html || '').replace(/(\\r\\n)/g, '\\n'); // remove windows nl.\n    var source = bin.source;\n    var css = safeForHTML(bin.css || '');\n    var javascript = safeForHTML(bin.javascript || '');\n    var processors = bin.processors || {};\n    var meta = bin.meta || (bin.url ? '<!-- source: http://jsbin.com/' + bin.url + '/' + (bin.revision || '') + ' -->\\n' : '');\n\n    // insert protocol if missing\n    html = html.replace(/(src|href)=('|\")\\/\\//g, '$1=$2' + proto + '//');\n\n    // meta = meta + '<!--hash:' + bin.url + '/' + bin.revision + '/^^hash^^-->\\n';\n\n    if (meta && meta.slice(-1) !== '\\n') {\n      meta += '\\n'; // a nice new line for the meta data\n    }\n\n    /**\n     * 1. strip the doctype and print it then add comment (<!-- file... etc)\n     * 2. in remaining code:\n     *   - is there %css%?\n     *    yes: replace with CSS\n     *    no: look for head - is there head?\n     *      yes: insert style tag\n     *      no: try after the <title> tag, or prepend to top: <style>css</style>\n     *   - is there %code%\n     *    yes: replace with JS\n     *    no: look for closing </body> - is there closing </body>\n     *      yes: insert above this\n     *      no: append to end (closing HTML?)\n     *   - is there closing body or html?\n     *     yes: insert \"source script tags\" above\n     *     no: append source scripts\n     *\n     */\n\n    file = html;\n\n    if (css) {\n      if (file.indexOf('%css%') !== -1) {\n        file = file.split('%css%').join(bin.css);\n      } else {\n        // is there head tag?\n        css = '<style id=\"jsbin-css\">\\n' + css + '\\n</style>\\n';\n        var head = insert(file, '</head>', css);\n        if (head) {\n          file = head;\n        } else {\n          var title = insert(file, '</title>', css);\n          if (title) {\n            file = title;\n          } else {\n            // slap on the top (note that this is *before* the doctype)\n            file = css + file;\n          }\n        }\n      }\n    }\n\n    // only look for a doctype at the top of the document\n    var doctype = (html.trim().split('\\n').shift().trim().match(doctypeRe) || [])[0] || '';\n\n    if (doctype) {\n      file = file.replace(doctypeRe, doctype + '\\n' + meta);\n      // strip from original html\n    } else {\n      file = meta + file;\n    }\n\n\n    if (javascript) {\n      if (file.indexOf('%code%') !== -1) {\n        file = file.split('%code%').join(javascript);\n      } else {\n        // is there head tag?\n        javascript = '<script id=\"jsbin-javascript\">\\n' + javascript + '\\n</script>';\n        var body = insert(file, '</body>', javascript + '\\n');\n        if (body) {\n          file = body;\n        } else {\n          // slap on the bottom\n          file = file + '\\n' + javascript;\n        }\n      }\n    }\n\n    // If we have the raw panel content - go ahead and stick that in scripts at the bottom.\n    if (source) {\n\n      if (source.css === css) {\n        delete source.css;\n      }\n      if (source.javascript === javascript) {\n        delete source.javascript;\n      }\n      if (source.html === html) {\n        delete source.html;\n      }\n\n      var sourceScripts = ['html', 'css', 'javascript'].map(function (type) {\n        if (source[type] === undefined) {\n          return '';\n        }\n\n        var content = safeForHTML(source[type]);\n        if (content) {\n          return '\\n<script id=\"jsbin-source-' + type + '\" type=\"text/' + (processors[type] || type) + '\">' + content + '</script>';\n        }\n      }).join('\\n');\n\n      var bodytag = insert(file, '</body>', sourceScripts);\n      if (bodytag) {\n        file = bodytag;\n      } else {\n        file += sourceScripts;\n      }\n    }\n\n    var signature = hash(file);\n    file = file.split('^^hash^^').join(signature);\n\n    return file;\n  };\n\n  return skylark.attach(\"intg.jsbin.bintofile\",binToFile);\n});"]}